{"name":"no-layout-sass介绍一","tagline":"no-layout-sass","body":"拿JQuery和Angular.js做一个对比的话，Angular是一个框架，而JQuery则是一个库。Angular封装了底层的操作，并为用户提供完整的接口。而JQuery则是基于底层操作，但是让底层操作更加轻松和容易，相当于语法糖。\r\n\r\nno-layout-sass相比于Bootstrap这种框架而言，更像是一个库。Bootstrap给用户提供了一系列类名和方法，用户可以在完全不写任何CSS的情况下实现一定的界面。no-layout.sass没有给用户提供一系列用法，而是封装了CSS很多常用语法，帮助你更轻松地写出想要的CSS代码，最大化地复用代码。\r\n\r\nno-layout-sass核心内容包括：\r\n\r\n* flexbox布局（处理了浏览器兼容问题）[查看浏览器对flex布局支持程度](http://caniuse.com/#search=flex)\r\n* 常见的Mixins\r\n\t* +clearfix (@extend %clearfix is better)\r\n\t* +abs-pos($top, $right, $bottom, $left)   //absolute position\r\n\t* +bg-variant($color)   //hover background variant (darken 10%)\r\n\t* +text-truncate (@extend %text-truncate is better)    //overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\r\n\t* +border-top-radius($value), +border-right-radius($value), +border-bottom-radius($value), +border-left-radius($value)\r\n\t* +border-triangle($borderWidth, $borderColor, $directive)\r\n\t* +device-retina   //classes work for retina device (@media)\r\n\t* +device-normal   //classes work for normal device (@media)\r\n\t* +retina-border-1px($color, $direction)   //get 1px 'border' for retina device (only one border)\r\n\t* +device-border-none   //hide boder created by +retina-border-1px\r\n\t* +font-face($fontName, $noSuffixFontUrl)   //compatible font-face\r\n    * +transform($value)\r\n\t* +transform-origin($value)\r\n\t* +animation($value)\r\n\t* +animation-timing-function($value)\r\n\t* +keyframes($name)    //refer to 'mixins/css3.sass'\r\n\t* +box-sizing($value) (@extend %box-sizing-border and %box-sizing-content is better)\r\n\t* +box-shadow($param)\r\n\t* +placeholder($color)\r\n\t* +user-select($model: text)\r\n\t* +backface-visibility($value: visible)\r\n\t* +perspective($value: none)\r\n\t* +perspective-origin($origin: 50% 50%)\r\n\t* +opacity($opacity)\r\n\t* +background-size($size)\r\n\t* +background-origin($model: border-box)\r\n\t* +background-clip($model: border-box)\r\n\t* +radial-gradient($arguments)\r\n\t* +linear-gradient($arguments)\r\n\r\n* 常使用的功能\r\n\r\n\t* .clearfix | %clearfix\r\n\t* .box-sizing-border, .box-sizing-content | %box-sizing-border, %box-sizing-content\r\n\t* .pull-left, .pull-right\r\n\t* .hide, .show    //display: none, display: block\r\n\t* .visible, .invisible    //visibility: visible, visibility: hidden\r\n\t* .ul-reset | %ul-reset    //margin: 0; padding: 0; list-style: none\r\n\t* .text-truncate | %text-truncate\r\n\t* .text-align-center, .text-align-right, .text-align-left\r\n\t* .vertical-align-middle\r\n\t* %drop-back   //drop back for modals or something like modal\r\n\t* .mt0 ~ .mt30, .mr0 ~ .mr30, .mb0 ~ .mb30, .ml0 ~ .ml30    //the most frequently used margin (with !important)\r\n\t* .pt0 ~ .pt30, .pr0 ~ .pr30, .pb0 ~ .pb30, .pl0 ~ .pl30    //the most frequently used padding (with !important)\r\n\r\n\r\n项目地址：[no-layout-sass](https://github.com/rainjay/no-layout-sass)\r\n\r\n安装：\r\n```\r\nnpm install no-layout-sass\r\n```\r\n使用：将no-layout.sass文件引入你的sass主文件里。\r\n```\r\n@import 'sass/no-layout.sass'\r\n```\r\n\r\n下面介绍no-layout.sass中flex布局用法:\r\n\r\n#### 公用css部分\r\n```\r\nbody\r\n  padding: 36px\r\n\r\n.demo-container\r\n  margin: 10px auto 20px\r\n  padding: 10px 15px\r\n  background-color: #ccc\r\n\r\n.height-200\r\n  height: 200px\r\n\r\n.one,\r\n.two,\r\n.three\r\n  margin: 5px 10px\r\n  padding: 5px 10px\r\n  background-color: #fff\r\n```\r\n\r\n####1、 .horizontal设置容器布局环境为flex，容器内子元素水平排列(子元素默认会朝着堆叠开始地方堆叠)\r\n```\r\n<div class=\"horizontal demo-container\">\r\n\t<div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n</div>\r\n```\r\n效果为\r\n{<29>}![alt](/content/images/2015/02/1.png)\r\n\r\n####2、 .inline-horizontal, 设置容器布局环境为inline-flex,同时子元素水平排列。\r\n```\r\n  <div class=\"inline-horizontal demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果为:\r\n{<30>}![](/content/images/2015/03/2.png)\r\n\r\n####3.设置容器为flexbox布局，且容器内子元素垂直排列(子元素默认会撑满与子元素堆叠方向垂直方向上的空间)，代码如下:\r\n```\r\n  <div class=\"vertical demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n{<31>}![](/content/images/2015/03/3.png)\r\n\r\n####4、.inline-vertical, 设置容器布局环境为inline-flex,同时子元素垂直排列(在与子元素堆叠方向垂直的方向上，子元素默认撑满父容器)。\r\n\r\n```\r\n  <div class=\"inline-vertical demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n\r\n```\r\n效果如下：\r\n{<32>}![](/content/images/2015/03/4.png)\r\n\r\n####5.在1的基础上，为容器内子元素Two添加.flex-1，这样，Two会自动在元素堆叠方向上填充父容器水平方向上One和Three之外的剩余空间，代码如下：\r\n```\r\n<div class=\"horizontal demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two flex-1\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n</div>\r\n```\r\n效果为\r\n{<33>}![alt](/content/images/2015/02/2.png)\r\n\r\n####6、在3的基础上，设置容器高度为200px，为容器内子元素Two添加.flex-1，这样TWO会自动在元素堆叠方向上填满One和Three之外的剩余空间，代码如下：\r\n```\r\n  <div class=\"vertical demo-container height-200\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"flex-1 two\">Two flex-1</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<34>}![](/content/images/2015/03/5.png)\r\n\r\n####7、在1的基础上，分别为One,Two,Three添加.flex3,.flex2 .flex1,代码如下：\r\n```\r\n  <div class=\"horizontal demo-container\">\r\n    <div class=\"flex-3 one\">One flex-3</div>\r\n    <div class=\"flex-2 two\">Two flex-2</div>\r\n    <div class=\"flex-1 three\">Three flex-1</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<35>}![](/content/images/2015/03/6.png)\r\n\r\n####8、在3的基础上，设置容器高度为200px，且为子元素分别为添加.flex-3, .flex-2和.flex-1,代码如下：\r\n```\r\n  <div class=\"vertical demo-container height-200\">\r\n    <div class=\"flex-3 one\">One flex-3</div>\r\n    <div class=\"flex-2 two\">Two flex-2</div>\r\n    <div class=\"flex-1 three\">Three flex-1</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<36>}![](/content/images/2015/03/1.png)\r\n\r\n####9、.horizontal, .start置高为200px容器布局环境为flex，子元素水平排列，且在与子元素堆叠方向所垂直的方向上，靠近开始位置（默认为撑满）。代码如下：\r\n\r\n```\r\n  <div class=\"horizontal start demo-container height-200\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<37>}![](/content/images/2015/03/2-1.png)\r\n\r\n####10、.horizontal，.center 设置高为200px容器布局环境为flex，子元素水平排列，且在与子元素堆叠方向所垂直的方向上，居中。代码如下：\r\n```\r\n  <div class=\"horizontal center demo-container height-200\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<38>}![](/content/images/2015/03/3-1.png)\r\n\r\n####11、.horizontal, .end 设置高为200px容器布局环境为flex，子元素水平排列，且在与子元素堆叠所垂直方向上，靠近尾部。代码如下：\r\n```\r\n <div class=\"horizontal end demo-container height-200\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<39>}![](/content/images/2015/03/4-1.png)\r\n\r\n####12、.horizontal, .baseline 设置高为200px容器布局环境为flex，子元素水平排列(padding不同)，且在子元素堆叠所垂直方向上，以bseline对齐。代码如下：\r\n```\r\n  <div class=\"horizontal baseline demo-container height-200\">\r\n    <div class=\"one\" style=\"padding: 10px\">One</div>\r\n    <div class=\"two\" style=\"padding: 20px\">Two</div>\r\n    <div class=\"three\" style=\"padding: 30px\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<40>}![](/content/images/2015/03/5-1.png)\r\n\r\n####13、.vertical, .start, 设置容器布局环境为flex，子元素垂直排列,且在与子元素堆叠方向所垂直的方向上，子元素靠近开始位置(默认撑满),代码如下：\r\n\r\n```\r\n  <div class=\"vertical start demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<41>}![](/content/images/2015/03/6-1.png)\r\n\r\n####14、.vertical, .center, 设置容器布局环境为flex，子元素垂直排列，且在与子元素堆叠方向所垂直的方向上，子元素居中。代码如下：\r\n```\r\n  <div class=\"vertical center demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<42>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-26-19.png)\r\n\r\n####15、.vertical, .end, 设置容器布局环境为flex，子元素垂直排列，且在与子元素堆叠方向所垂直的方向上，子元素靠近尾部。代码如下：\r\n```\r\n  <div class=\"vertical end demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<43>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-25-22.png)\r\n\r\n\r\n####16、.horizontal, .center-justify,设置容器布局环境为flex，子元素垂直排列，且在元素堆叠方向上，子元素居中。(默认在开始位置)代码如下：\r\n```\r\n  <div class=\"horizontal center-justify demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果为：\r\n{<44>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-32-53.png)\r\n\r\n####17、.horizontal，.end-justify,设置容器布局环境为flex，子元素垂直排列，且在元素堆叠方向上，子元素靠近尾部。代码如下：\r\n```\r\n  <div class=\"horizontal end-justify demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<45>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-35-24.png)\r\n\r\n####18、horizontal around-justify,设置容器布局环境为flex，子元素垂直排列，且在元素堆叠方向上，子元素around排列。代码如下：\r\n```\r\n <div class=\"horizontal around-justify demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<46>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-36-50.png)\r\n\r\n####19、.horizontal,.justify,设置容器布局环境为flex，子元素垂直排列，且在元素堆叠方向上，子元素两端对齐排列（注意.demo-container是有内边距的）。代码如下：\r\n```\r\n  <div class=\"horizontal justify demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<47>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-37-03.png)\r\n\r\n####20、.horizontal, .justify (child .self-start, .self-center, .self-end) height-200,设置高度为200px的容器布局环境为flex,子元素分别为self-start,self-center,self-end.(默认撑满),代码如下：\r\n```\r\n  <div class=\"horizontal justify demo-container height-200\">\r\n    <div class=\"one self-start\">One self-start</div>\r\n    <div class=\"two self-center\">Two self-center</div>\r\n    <div class=\"three self-end\">Three self-end</div>\r\n    <div class=\"one\">default</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<48>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-37-14.png)\r\n\r\n####21、.vertical, .center-justify, 设置高度为200px容器布局环境为flex，子元素垂直排列，且在元素堆叠方向上居中（默认在开始位置）,代码如下：\r\n```\r\n<div class=\"vertical center-justify demo-container height-200\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n\r\n{<49>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-46-44.png)\r\n\r\n####22、.vertical,.end-justify,设置高度为200px容器布局环境为flex，子元素垂直排列，且在元素堆叠方向上靠近尾部。代码如下：\r\n```\r\n  <div class=\"vertical end-justify demo-container height-200\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n{<50>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-46-54.png)\r\n\r\n####23、.vertical, .around-justify 设置高度为200px容器布局环境为flex，子元素垂直排列，且在元素堆叠方向上around排列。代码如下：\r\n```\r\n  <div class=\"vertical around-justify demo-container height-200\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<51>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-47-00.png)\r\n\r\n####24、.vertical, .justify, 设置高度为200px容器布局环境为flex，子元素垂直排列，且在元素堆叠方向上两端对齐。\r\n```\r\n  <div class=\"vertical justify demo-container height-200\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<52>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-47-08.png)\r\n\r\n####25、.vertical，justify (child .self-start, .self-center, .self-end) 设置高度为200px的容器布局环境为flex，子元素垂直排列，分别为self-start,self-center, self-end(默认撑满)代码如下：\r\n```\r\n<div class=\"vertical justify demo-container height-200\">\r\n    <div class=\"one self-start\">One self-start</div>\r\n    <div class=\"two self-center\">Two self-center</div>\r\n    <div class=\"three self-end\">Three self-end</div>\r\n    <div class=\"one\">default</div>\r\n```\r\n效果如下：\r\n{<53>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-47-15.png)\r\n\r\n####26、.horizontal, .wrap, 设置宽度为200px的容器的布局环境为flex, 子元素水平排列,子元素超过父元素长度时包裹。代码如下：\r\n```\r\n  <div class=\"horizontal wrap demo-container\" style=\"width: 200px;\">\r\n    <div class=\"one\" style=\"100px\">One</div>\r\n    <div class=\"two\" style=\"80px\">Two</div>\r\n    <div class=\"three\" style=\"30px\">Three</div>\r\n  </div>\r\n```\r\n效果如下：\r\n{<54>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-47-25.png)\r\n\r\n####27、.horizontal，.reverse, 设置容器为flex布局环境，子元素水平排列，且镜像。</h2>\r\n```\r\n  <div class=\"horizontal reverse demo-container\">\r\n    <div class=\"one\">One</div>\r\n    <div class=\"two\">Two</div>\r\n    <div class=\"three\">Three</div>\r\n  </div>\r\n```\r\n效果图如下：\r\n{<55>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-47-41.png)\r\n\r\n最后介绍下Sass占位符%,例如以下Sass代码：\r\n```\r\n%public  \r\n  border: 1px solid red\r\n  font-size: 18px\r\n  line-height: 1.8\r\n.main    \r\n  @extend %public\r\n  display: inline-block\r\n  margin: 10px                 \r\n.sidebar    \r\n  @extend %public    \r\n  padding: 9px                        \r\n.footer    \r\n  @extend %public    \r\n  padding: 18px\r\nul > .test1    \r\n  @extend %public    \r\n  margin: 0    \r\n  list-style: none\r\n```\r\n编译之后的结果为：\r\n```\r\n.main,\r\n.sidebar,\r\n.footer,\r\nul > .test1 {    \r\n  border: 1px solid red;    \r\n  font-size: 18px;    \r\n  line-height: 1.8;\r\n}             \r\n.main {    \r\n  display: inline-block;    \r\n  margin: 10px;\r\n}\r\n.sidebar{    \r\n  padding: 9px;\r\n}\r\n.footer {    \r\n  padding: 18px;\r\n}\r\nul > .test1 {    \r\n  margin: 0;    \r\n  list-style: none;\r\n}\r\n```\r\n%占位符在编译之后并不存在，这个功能是非常强大的，既可以保证你Sass代码良好的可读性，又能保证编译出的CSS代码可以最大化地实现代码的可复用性，减少重复代码的出现。利用这个特性，可以非常方便地写我们的布局代码，减少多余的选择器。在1 - 27中所有的类都有其对应的占位符，例如.horizontal对应的占位符为%horizontal，下面基于占位符的@extend来实现一个导航：\r\n\r\n####28、@extend %horizontal, @extend %justify,父容器@extend %horizontal，@extend %justify，代码如下：\r\n\r\n```\r\n  <ul class=\"nav\">\r\n    <li>nav1</li>\r\n    <li>nav2</li>\r\n    <li>nav3</li>\r\n    <li>nav4</li>\r\n    <li>nav5</li>\r\n  </ul>\r\n  \r\n  //sass 内容\r\n  .nav\r\n  \t@extend %horizontal\r\n  \t@extend %justify\r\n  \tmargin: 0\r\n  \tpadding: 3px 25px\r\n  \tbackground-color: #ccc\r\n  \tborder-radius: 5px\r\n  \tlist-style: none\r\n\r\n  \t> li\r\n    \tpadding: 5px 20px\r\n    \tborder-radius: 3px\r\n    \tcolor: #fff\r\n    \t+bg-variant(green)\r\n```\r\n效果如下：\r\n{<56>}![](/content/images/2015/03/Screen-Shot-2015-03-17-at-02-47-48.png)\r\n\r\n在28中很容易就实现一个导航栏，利用no-layout.sass中所有flex布局相关的占位符，可以轻松实现绝大多数的布局，而且可以最大化地复用代码。\r\n\r\n相关推荐：[no-layout-sass使用介绍（2）——常用Mixins和功能](http://blog.rainjay.wang/no-layout-sasss-common/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}